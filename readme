# Project Overview: EC2 Web Application Deployment, This project involves deploying a web application to an EC2 instance using Ansible. The setup includes a `main.yml` playbook, a `vars.yml` configuration file, and a `hostfile` for dynamic inventory management. Below is an overview of each component and their roles in the deployment process.

# `main.yml` Playbook: The `main.yml` playbook is responsible for managing EC2 instances and deploying a web application. It is divided into several key tasks:

1. Create or Terminate EC2 Instance:
   This task uses the `amazon.aws.ec2_instance` module to create or terminate an EC2 instance based on the specified state (`present` or `absent`). It registers the instance details for further use.

2. Debug EC2 Instance Creation Output:
   This task outputs the details of the created or terminated instance for debugging purposes.

3. Wait for Instance to Become Reachable:
   This task waits until the newly created EC2 instance is reachable over SSH, ensuring it is ready for further configuration.

4. Terminate EC2 Instance:
   When the state is `absent`, this task terminates the EC2 instance using the `amazon.aws.ec2_instance` module.

5. Update Dynamic Inventory:
   - Add Instance: When creating a new instance, this task updates the `hostfile` with the instance's public IP address and connection details.
   - Remove Instance: When terminating an instance, this task removes its entry from the `hostfile`.

6. Save Public IP to File:
   This task saves the public IP address of the newly created instance to a file for later use.

7. Add Instance to In-Memory Inventory:
   This task uses the `add_host` module to dynamically add the new EC2 instance to Ansible's in-memory inventory, allowing it to be targeted in subsequent tasks.

8. Install and Configure Web Application:
   - Load Public IP: Loads the public IP from the saved file.
   - Update Apt Cache: Updates the apt package cache.
   - Install Nginx and Git: Installs Nginx and Git on the EC2 instance.
   - Clone GitHub Repository: Clones the specified GitHub repository containing the web application.
   - Remove Default Nginx Page: Removes the default Nginx page.
   - Copy Files to Nginx Directory: Copies the cloned repository files to the Nginx web directory.
   - Set Permissions: Sets appropriate permissions for the web files.
   - Remove Git Clone Directory: Cleans up the temporary directory used for cloning.
   - Restart Nginx: Restarts Nginx to apply changes.

9. Display Public IP:
   This task displays the public IP address where the web application can be accessed.


# `vars.yml` Configuration File: The `vars.yml` file contains variables used in the `main.yml` playbook. It includes:

- `security_group`: The ID of the security group to associate with the EC2 instance.
- `ami`: The AMI ID to use for the EC2 instance.
- `instance_type`: The type of EC2 instance to create (e.g., `t2.micro`).
- `region`: The AWS region where the instance will be launched.
- `key_name`: The name of the AWS key pair for SSH access.
- `repo_url`: The URL of the GitHub repository containing the web application.
- `pem_file`: The path to the PEM file used for SSH authentication.
- `inventory_file`: The absolute path to the dynamic inventory file.


#`hostfile` for Dynamic Inventory: The `hostfile` is used to dynamically manage inventory by recording the details of EC2 instances. Initially, this file is empty. As instances are created or terminated, the `hostfile` is updated to include the following information:

- Format: Each entry includes the instanceâ€™s public IP address, SSH user, and path to the PEM file. For example:
  ```
  203.0.113.0 ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/etc/ansible/devops.pem
  ```
- Purpose: This dynamic inventory allows Ansible to target and manage instances based on their IP addresses and connection details. The file is updated during the playbook run to reflect the current state of instances.


Below is a README file with instructions for setting up the environment before executing the playbook:
# Pre-requisites: Install Python3, pip, boto3, and botocore Before running the main playbook, ensure the following steps

# 1. Update package repositories (Ubuntu/Debian):
     sudo apt update

# 2. Install Python3 and pip:    
     sudo apt install -y python3 python3-pip

# 3. Remove the broken virtual environment:
     rm -rf /home/ubuntu/myenv

# 4. Recreate the virtual environment:
     python3 -m venv /home/ubuntu/myenv

# 5. After recreating the environment, check if the Python interpreter now exists:
     ls /home/ubuntu/myenv/bin/python3

# 6. Activate the virtual environment:
     source /home/ubuntu/myenv/bin/activate

# 7. For upgrading the pip
     pip install --upgrade pip setuptools

# 8. Install boto3 and botocore using pip:
     pip install boto3 botocore ansible

# 9. Verify boto3 and botocore installation:
     pip show boto3 botocore, which python3,  pip list | grep boto3

Post-Execution Cleanup
If you no longer need the EC2 resources and want to clean up the environment, follow these steps:

# 10: deactivate
# 11: rm -rf /home/ubuntu/myenv


# To execute the playbook, use the following command:
-> ansible-playbook -i hostfile main.yml -e "state=present"
-> ansible-playbook -i hostfile main.yml -e "state=absent"


Summary: This project demonstrates how to automate the deployment of a web application to EC2 instances using Ansible. The `main.yml` playbook orchestrates instance creation, application deployment, and configuration, while the `vars.yml` file provides necessary configuration details. The `hostfile` dynamically manages instance inventory, ensuring accurate targeting of EC2 instances for Ansible tasks.

